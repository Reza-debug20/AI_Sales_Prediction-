import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# --- Ø§ÛŒØ¬Ø§Ø¯ Ù…Ø¬Ù…ÙˆØ¹Ù‡ Ø¯Ø§Ø¯Ù‡ Ø¯Ø§Ø®Ù„ÛŒ ---
data = {
    "Advertising": [2000,2500,3000,4000,1500,3500,4200,1800,2700,3900],
    "Price": [100,95,90,85,110,92,88,105,98,87],
    "Sales": [500,600,650,800,400,700,820,450,620,780]
}
df = pd.DataFrame(data)

# --- Ø¢Ù…Ø§Ø¯Ù‡ Ø³Ø§Ø²ÛŒ---
X = df[["Advertising", "Price"]]
y = df["Sales"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# --- Ø³Ø§Ø®Øª Ù…Ø¯Ù„ Ø´Ø¨Ú©Ù‡ Ø¹ØµØ¨ÛŒ---
model = Sequential()
model.add(Dense(16, input_dim=2, activation="relu"))
model.add(Dense(8, activation="relu"))
model.add(Dense(1, activation="linear"))

model.compile(optimizer="adam", loss="mse")
history = model.fit(X_train, y_train, epochs=200, verbose=0)

# --- Ù¾ÛŒØ´â€ŒØ¨ÛŒÙ†ÛŒ ---
y_pred = model.predict(X_test)

# --- Ø§Ø±Ø²ÛŒØ§Ø¨ÛŒ ---
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"ðŸ“Š MAE: {mae:.2f}")
print(f"ðŸ“‰ RMSE: {rmse:.2f}")
print(f"ðŸŽ¯ RÂ²: {r2:.2f}")

# --- Ù†Ù…ÙˆØ¯Ø§Ø± Ø®Ø·Ø§ ---
plt.plot(history.history["loss"])
plt.title("Training error chart")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.show()